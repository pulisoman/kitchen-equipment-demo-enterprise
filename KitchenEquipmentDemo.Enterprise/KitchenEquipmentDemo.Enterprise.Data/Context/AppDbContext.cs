// <auto-generated>

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Infrastructure.Annotations;
using System.Data.Entity.Infrastructure.Interception;
using System.Data.Entity.Spatial;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using KitchenEquipmentDemo.Enterprise.Data.Interfaces;
using KitchenEquipmentDemo.Enterprise.Data.Models;
using KitchenEquipmentDemo.Enterprise.Data.Mappings;

namespace KitchenEquipmentDemo.Enterprise.Data.Context
{
    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class AppDbContext : DbContext, IAppDbContext
    {
        public DbSet<Equipment> Equipment { get; set; } // equipment
        public DbSet<Site> Site { get; set; } // site
        public DbSet<SiteEquipmentHistory> SiteEquipmentHistory { get; set; } // site_equipment_history
        public DbSet<User> User { get; set; } // user
        public DbSet<UserRegistrationRequest> UserRegistrationRequest { get; set; } // user_registration_request

        static AppDbContext()
        {
            System.Data.Entity.Database.SetInitializer<AppDbContext>(null);
        }

        /// <inheritdoc />
        public AppDbContext()
            : base("Name=AppDb")
        {
        }

        /// <inheritdoc />
        public AppDbContext(string connectionString)
            : base(connectionString)
        {
        }

        /// <inheritdoc />
        public AppDbContext(string connectionString, DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        /// <inheritdoc />
        public AppDbContext(DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public AppDbContext(DbConnection existingConnection, DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        /// <inheritdoc />
        public AppDbContext(ObjectContext objectContext, bool dbContextOwnsObjectContext)
            : base(objectContext, dbContextOwnsObjectContext)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new EquipmentConfiguration());
            modelBuilder.Configurations.Add(new SiteConfiguration());
            modelBuilder.Configurations.Add(new SiteEquipmentHistoryConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new UserRegistrationRequestConfiguration());

            // Indexes
            modelBuilder.Entity<Equipment>()
                .Property(e => e.SerialNumber)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UX_equipment_serial", 1) { IsUnique = true })
                );

            modelBuilder.Entity<Equipment>()
                .Property(e => e.UserId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_equipment_user", 1))
                );

            modelBuilder.Entity<Equipment>()
                .Property(e => e.SiteId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("IX_equipment_site", 1))
                );

            modelBuilder.Entity<Site>()
                .Property(e => e.UserId)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new[]
                    {
                        new IndexAttribute("IX_site_user", 1),
                        new IndexAttribute("UX_site_owner_name", 1) { IsUnique = true }
                    }));

            modelBuilder.Entity<Site>()
                .Property(e => e.Description)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UX_site_owner_name", 2) { IsUnique = true })
                );

            modelBuilder.Entity<User>()
                .Property(e => e.EmailAddress)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UX_user_email", 1) { IsUnique = true })
                );

            modelBuilder.Entity<User>()
                .Property(e => e.UserName)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UX_user_username", 1) { IsUnique = true })
                );

            modelBuilder.Entity<UserRegistrationRequest>()
                .Property(e => e.EmailAddress)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UX_urr_email_pending", 1) { IsUnique = true })
                );

            modelBuilder.Entity<UserRegistrationRequest>()
                .Property(e => e.UserName)
                .HasColumnAnnotation(
                    IndexAnnotation.AnnotationName,
                    new IndexAnnotation(new IndexAttribute("UX_urr_username_pending", 1) { IsUnique = true })
                );

        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new EquipmentConfiguration(schema));
            modelBuilder.Configurations.Add(new SiteConfiguration(schema));
            modelBuilder.Configurations.Add(new SiteEquipmentHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new UserRegistrationRequestConfiguration(schema));

            return modelBuilder;
        }
    }
}
// </auto-generated>
